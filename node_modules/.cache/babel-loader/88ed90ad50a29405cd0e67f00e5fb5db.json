{"ast":null,"code":"module.exports = function (React, common) {\n  var exports = {\n    totalPageRetriever: function () {\n      return this.props.totalPages;\n    },\n    valueRetriever: function (column, entry) {\n      if (entry.get) {\n        return entry.get(column.key);\n      }\n\n      return entry[column.key];\n    },\n    keyRetriever: function (entry) {\n      return entry.id || entry.key;\n    },\n    entriesRetriever: function (entries) {\n      if (entries.models) {\n        return entries.models;\n      }\n\n      return entries;\n    }\n  };\n  var classData = {\n    Loader: {\n      render: function () {\n        var props = this.props,\n            loading = this.state && this.state.loading || props.loading;\n\n        if (this.props.loading || this.state && this.state.loading) {\n          var className = common.mergeClassNames('ui', 'segment', props.className);\n          loadingClass = common.mergeClassNames('ui active', props.type || 'inverted dimmer');\n          return React.DOM.div({\n            className: className\n          }, React.DOM.div({\n            className: loadingClass\n          }, React.DOM.div({\n            className: 'ui loader' + (props.label ? ' text' : '')\n          }, props.label)), this.props.children);\n        } else {\n          return React.DOM.div({\n            className: props.className\n          }, this.props.children);\n        }\n      }\n    },\n    Steps: {\n      getInitialState: function () {\n        return {\n          active: this.props.active || this.props.steps[0].key\n        };\n      },\n      render: function () {\n        var self = this,\n            props = this.props,\n            className = common.mergeClassNames('ui steps', props.type, props.className),\n            activeStep = this.state.active,\n            children = props.steps.map(function (step) {\n          var className = common.mergeClassNames('ui step', step.key === activeStep ? 'active' : undefined, step.disabled ? 'disabled' : undefined);\n          return React.DOM.div({\n            className: className,\n            onClick: self.clicker(step)\n          }, step.label);\n        });\n        return React.DOM.div({\n          className: className\n        }, children);\n      },\n      clicker: function (step) {\n        var self = this;\n        return function () {\n          if (!step.disabled) {\n            var rtn = self.props.onChange && self.props.onChange(step);\n\n            if (rtn === undefined || rtn) {\n              self.setState({\n                active: step.key\n              });\n            }\n          }\n        };\n      }\n    },\n\n    /*** Paginator\n     * A paginator component.\n     *\n     * Properties\n     * ----------\n     * - ***totalPages***: the number of total pages\n     * - ***className***: additional top level class name\n     * - ***page***: (default: 1) the current page number (1-based)\n     * - ***radius***: (default: 1) the number of page links (moving out from current page) to show\n     * - ***anchor***: (default: 1) the number of page links (moving out from each end) to show\n     * - ***onChange***: called when the user clicked a page number\n     *\n     * Example\n     * ---------\n     *     <Paginator page={2} totalPages={12} onChange={funtion(pageNumber) {...}}/>\n     ***/\n    Paginator: {\n      getInitialState: function () {\n        return {\n          page: this.props.page || 1\n        };\n      },\n      render: function () {\n        var totalPages = exports.totalPageRetriever.call(this);\n\n        if (totalPages && totalPages > 1) {\n          var current = this.state.page,\n              radius = this.props.radius || 0,\n              anchor = this.props.anchor || 1,\n              separator = this.props.separator || '...',\n              min = Math.max(current - radius, 1),\n              max = Math.min(current + radius, totalPages),\n              showArrows = this.props.showArrows === undefined ? true : this.props.showArrows,\n              totalShowing = radius * 2 + anchor * 2 + 3\n          /* current + separator */\n          ,\n              showRightSeparator = totalPages > current + radius + anchor,\n              showLeftSeparator = current > anchor + Math.max(1, radius),\n              compact = this.props.compact,\n              index = {},\n              children = [];\n\n          if (compact) {\n            showArrows = false;\n          }\n\n          if (showLeftSeparator) {\n            totalShowing--;\n          }\n\n          if (showRightSeparator) {\n            totalShowing--;\n          }\n\n          var i; // starting anchor\n\n          for (i = 1; i <= anchor && i <= totalPages; i++) {\n            children.push(i);\n            index[i] = children.length;\n          } // radius\n\n\n          for (i = min; i <= max; i++) {\n            if (!index[i]) {\n              children.push(i);\n              index[i] = children.length;\n            }\n          } // upper anchor\n\n\n          for (i = Math.max(totalPages - anchor + 1, current + 1); i <= totalPages; i++) {\n            if (!index[i]) {\n              children.push(i);\n              index[i] = children.length;\n            }\n          } // always keep the same number of indicators showing - start down from middle\n\n\n          for (i = current; i > 0 && children.length < totalShowing; i--) {\n            if (typeof index[i] === 'undefined') {\n              _idx = index[i + 1] - 1;\n              children.splice(_idx, 0, i);\n              index[i] = _idx + 1;\n            }\n          }\n\n          for (i = current; children.length < totalShowing && children.length < totalPages; i++) {\n            if (!index[i]) {\n              children.splice(i - 1, 0, i);\n            }\n          } // map the children to components\n\n\n          var self = this;\n          children = children.map(function (child) {\n            if (child === current) {\n              return React.DOM.div({\n                className: 'active item'\n              }, child);\n            } else {\n              return React.DOM.a({\n                className: 'item',\n                href: '#' + child,\n                onClick: common.eventBinder(child, 'onChange', self, true)\n              }, child);\n            }\n          }); // separators\n\n          if (showLeftSeparator) {\n            if (compact) {\n              children.splice(anchor, 0, React.DOM.a({\n                className: 'icon item'\n              }, React.DOM.i({\n                className: 'left arrow icon',\n                onClick: common.eventBinder(current - 1, 'onChange', self, true)\n              })));\n            } else {\n              children.splice(anchor, 0, React.DOM.div({\n                className: 'disabled item'\n              }, separator));\n            }\n          }\n\n          if (showRightSeparator) {\n            if (compact) {\n              children.splice(children.length - anchor, 0, React.DOM.a({\n                className: 'icon item'\n              }, React.DOM.i({\n                className: 'right arrow icon',\n                onClick: common.eventBinder(current + 1, 'onChange', self, true)\n              })));\n            } else {\n              children.splice(children.length - anchor, 0, React.DOM.div({\n                className: 'disabled item'\n              }, separator));\n            }\n          } // arrows\n\n\n          if (showArrows) {\n            var nodeName, className;\n\n            if (current === 1) {\n              nodeName = 'div';\n              className = 'icon disabled item';\n            } else {\n              nodeName = 'a';\n              className = 'icon item';\n            }\n\n            children.splice(0, 0, React.DOM[nodeName]({\n              className: className,\n              onClick: current > 1 ? common.eventBinder(current - 1, 'onChange', self, true) : undefined\n            }, React.DOM.i({\n              className: 'left arrow icon'\n            })));\n\n            if (current === totalPages) {\n              nodeName = 'div';\n              className = 'icon disabled item';\n            } else {\n              nodeName = 'a';\n              className = 'icon item';\n            }\n\n            children.splice(children.length, 0, React.DOM[nodeName]({\n              className: className,\n              onClick: current < totalPages ? common.eventBinder(current + 1, 'onChange', self, true) : undefined\n            }, React.DOM.i({\n              className: 'right arrow icon'\n            })));\n          }\n\n          return React.DOM.div({\n            className: 'ui pagination menu'\n          }, children);\n        } else {\n          return React.DOM.div();\n        }\n      },\n      onChange: function (pageNumber) {\n        this.setState({\n          page: pageNumber\n        });\n      },\n      setPage: function (pageNumber) {\n        this.setState({\n          page: pageNumber\n        });\n      }\n    },\n    Menu: {\n      getInitialState: function () {\n        return {\n          active: this.props.active || this.props.items[0].key\n        };\n      },\n      render: function () {\n        var self = this,\n            props = this.props,\n            items = props.items || [],\n            activeKey = this.state.active,\n            active;\n\n        for (var i = 0; i < items; i++) {\n          if (activeKey === items[i].key) {\n            active = items[i];\n            break;\n          }\n        }\n\n        var children = items.map(function (item) {\n          return React.DOM.a({\n            className: common.mergeClassNames(item.key === activeKey && 'active', 'item', item.className),\n            href: item.href || item.key,\n            onClick: item.href ? props.onClick : common.eventBinder(item, 'onChange', self, true)\n          }, item.icon ? React.DOM.i({\n            className: item.icon + ' icon'\n          }) : undefined, item.label);\n        });\n        return React.DOM.div({\n          className: common.mergeClassNames('ui menu', props.className)\n        }, children, props.children);\n      },\n      onChange: function (item) {\n        this.setState({\n          active: item.key\n        });\n\n        if (item.activate) {\n          item.activate();\n        }\n      },\n      setActive: function (key) {\n        this.setState({\n          active: key\n        });\n      }\n    },\n    Tabs: {\n      getInitialState: function () {\n        return {\n          active: this.props.active || this.props.tabs[0].key\n        };\n      },\n      render: function () {\n        var self = this,\n            props = this.props,\n            tabs = props.tabs || [],\n            type = props.type || 'top attached tabular',\n            bodyType = props.bodyType || 'bottom attached segment',\n            activeKey = this.state.active,\n            active;\n\n        for (var i = 0; i < props.tabs.length; i++) {\n          if (activeKey === props.tabs[i].key) {\n            active = props.tabs[i];\n            break;\n          }\n        }\n\n        var tabLabels = tabs.map(function (tab) {\n          return React.DOM.a({\n            className: common.mergeClassNames(tab.key === activeKey && 'active', 'item', tab.className),\n            href: tab.key,\n            onClick: common.eventBinder(tab, 'onChange', self, true)\n          }, tab.icon ? React.DOM.i({\n            className: tab.icon + ' icon'\n          }) : undefined, tab.label);\n        });\n        var pageComponent = active.page();\n        return React.DOM.div({\n          className: props.className\n        }, React.DOM.div({\n          className: 'ui ' + type + ' menu'\n        }, tabLabels), React.DOM.div({\n          className: 'ui ' + bodyType\n        }, pageComponent));\n      },\n      onChange: function (tab) {\n        this.setState({\n          active: tab.key\n        });\n      }\n    },\n    Table: {\n      render: function () {\n        var self = this,\n            props = this.props;\n        var cols = props.cols.map(function (col) {\n          var label = common.result(col.label),\n              className = col.colClass;\n\n          if (typeof className === 'function') {\n            className = className.call(self, value, col);\n          }\n\n          return React.DOM.th({\n            className: className\n          }, label);\n        });\n        var index = 0,\n            rows = exports.entriesRetriever.call(this, props.entries).map(function (entry) {\n          var cells = props.cols.map(function (col) {\n            var value = exports.valueRetriever.call(this, col, entry),\n                cellClassName = col.cellClassName;\n\n            if (typeof cellClassName === 'function') {\n              cellClassName = cellClassName.call(self, value, col);\n            }\n\n            index++;\n\n            if (col.formatter) {\n              value = col.formatter.call(this, value, entry, index, col);\n            }\n\n            if (col.factory) {\n              value = col.factory.call(this, value, entry, index, col);\n            }\n\n            return React.DOM.td({\n              className: cellClassName,\n              key: col.key\n            }, value);\n          });\n          var className = props.rowClassName && props.rowClassName.call(this, entry);\n          return React.DOM.tr({\n            className: className,\n            key: exports.keyRetriever(entry)\n          }, cells);\n        });\n        return React.DOM.table({\n          className: common.mergeClassNames('ui table', props.className)\n        }, React.DOM.thead(undefined, cols), React.DOM.tbody(undefined, rows));\n      }\n    }\n  };\n  common.init(exports, classData);\n  return exports;\n};","map":null,"metadata":{},"sourceType":"script"}