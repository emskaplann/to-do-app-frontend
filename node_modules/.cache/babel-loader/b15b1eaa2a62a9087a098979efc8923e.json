{"ast":null,"code":"module.exports = function (React, common) {\n  var exports = {\n    errorRenderer: function (error, children) {\n      children.push(React.DOM.div({\n        className: 'ui red pointing top ui label'\n      }, error));\n    },\n    // apply an icon to a button\n    applyIcon: function (context) {\n      var _children = [];\n\n      _children.push(React.DOM.i({\n        className: 'icon ' + context.icon\n      }));\n\n      React.Children.forEach(context.children, function (child) {\n        _children.push(child);\n      });\n      context.children = _children;\n    },\n    // apply a loading state to a button\n    applyLoadingState: function (context) {\n      context.icon = 'loading';\n      context.disabled = true;\n\n      if (this.props.loadingMessage) {\n        context.children = this.props.loadingMessage;\n      }\n    },\n    fieldRenderer: function () {\n      var props = this.props,\n          state = this.state || {},\n          className = common.mergeClassNames('field', this._controlClassName && this._controlClassName()),\n          id = this.props.id;\n      labelAfter = props.labelAfter !== undefined ? props.labelAfter : this.defaultLabelAfter, inlineLabel = props.inlineLabel !== undefined ? props.inlineLabel : this.defaultInlineLabel, containerClass = common.mergeClassNames(props.containerClass, this.defaultContainerClass && this.defaultContainerClass()), inputFieldProps = common.omit(props, ['label', 'disabled', 'fieldClass', 'value']), error = props.error || state.error;\n\n      if (error) {\n        className = common.mergeClassNames(className, 'error');\n      }\n\n      if (this.props.disabled) {\n        className = common.mergeClassNames(className, 'disabled');\n      }\n\n      if (props.fieldClass) {\n        className = common.mergeClassNames(props.fieldClass, className);\n      }\n\n      if (props.label && !id) {\n        id = common.uniqueId();\n      }\n\n      if (state.loading || props.loading) {\n        containerClass = common.mergeClassNames(containerClass, 'loading');\n      }\n\n      inputFieldProps.id = id;\n      inputFieldProps.defaultDisabled = this.props.disabled;\n\n      if (this.modifyInputFieldProps) {\n        inputFieldProps = this.modifyInputFieldProps(inputFieldProps);\n      }\n\n      var inputField = this.renderInput(inputFieldProps),\n          label = props.label ? React.DOM.label({\n        htmlFor: id\n      }, props.label) : undefined,\n          fieldChildren = [],\n          containerChildren = [];\n\n      if (containerClass) {\n        containerChildren.push(inputField);\n\n        if (inlineLabel && label) {\n          containerChildren.splice(labelAfter ? 1 : 0, 0, label);\n          label = undefined;\n        }\n\n        if (error) {\n          if (this.errorRenderer) {\n            this.errorRenderer(error, containerChildren);\n          } else {\n            exports.errorRenderer.call(this, error, containerChildren);\n          }\n        }\n\n        var container = React.DOM.div({\n          className: containerClass\n        }, containerChildren);\n\n        if (label) {\n          fieldChildren.push(container);\n        } else {\n          return container;\n        }\n      } else if (!label) {\n        return inputField;\n      } else {\n        fieldChildren.push(inputField);\n\n        if (error) {\n          if (this.errorRenderer) {\n            this.errorRenderer(error, fieldChildren);\n          } else {\n            exports.errorRenderer.call(this, error, fieldChildren);\n          }\n        }\n      }\n\n      if (label) {\n        fieldChildren.splice(labelAfter ? 1 : 0, 0, label);\n      }\n\n      return React.DOM.div({\n        className: className\n      }, fieldChildren);\n    }\n  };\n  var classData = {\n    /*** Form\n     * A form control which reacts to a loading state\n     *\n     * Properties\n     * ----------\n     * - ***loading***: true if the form is in a loading state\n     * - ***className***: additional form class name (\"ui form segment\") will already be applied\n     *\n     * Overrides\n     * ---------\n     * - ***mixins.Form***: default mixins that should be applied\n     *\n     * Example\n     * --------\n     *     var Form = rsui.form.Form;\n     *     <Form className=\"my-class\" loading={isLoading} onSubmit={handleSubmit}> ... </Form>\n     ***/\n    Form: {\n      render: function () {\n        var props = this.props,\n            loading = props.loading || this.state && this.state.loading;\n        attributes = common.defaults({\n          className: common.mergeClassNames('ui form', this._className, props.className, loading && 'loading')\n        }, this.props);\n        return React.DOM.form(attributes, props.children);\n      }\n    },\n\n    /*** Control\n     * Form field control meant to provide a label and additon field wrapper elements to\n     * arbitrary nested content\n     *\n     * Properties\n     * ----------\n     * - ***id***: the id used for the label (for attribute)\n     * - ***label***: the field label\n     * - ***inlineLabel***: true if the label should be included as a sibling to the nested content\n     * - ***labelAfter***: true if the inline label should be applied as the last sibling\n     * - ***containerClass***: the inner container element class name\n     * - ***className***: the outer field element class name\n     * - ***disabled***: true if the field should render as disabled\n     * - ***loading***: true if the field should render as loading\n     *\n     * Overrides\n     * ---------\n     * - ***fieldRenderer***: function which acts as the render method for this component\n     * - ***mixins.Control***: default mixins that should be applied\n     *\n     * Example\n     * --------\n     *     var Control = rsui.form.Control;\n     *     <Control label=\"Foo\" error=\"some error message to display\"> some input field </Control>\n     ***/\n    Control: {\n      render: exports.fieldRenderer,\n      renderInput: function () {\n        return this.props.children;\n      },\n      _controlClassName: function () {\n        return this._className;\n      }\n    },\n\n    /*** Button\n     * A standard input button which reacts to a loading state\n     *\n     * Properties\n     * ----------\n     * - ***icon***: the [icon name](http://semantic-ui.com/elements/icon.html)\n     * - ***className***: additional button class name (\"ui button\" will already be applied)\n     * - ***disabled***: true if the button should be disabled\n     * - ***loading***: true if the button is in a loading state\n     *\n     * Overrides\n     * ---------\n     * - ***mixins.Button***: default mixins that should be applied\n     * - ***applyIcon***: ```function({children, className, disabled, icon})```\n     *     apply the icon and update any data for rendering\n     * - ***applyLoadingState***: ```function({children, className, disabled, icon})```\n     *     apply a loading state and update any data for rendering\n     *\n     * Example\n     * --------\n     *     var Button = rsui.form.Button;\n     *     <Button icon=\"comment\" onClick={myClickHandler}> Click me </Control>\n     *     <Button loading={true} label=\"This is loading\"/>\n     ***/\n    Button: {\n      render: function () {\n        var props = this.props,\n            state = this.state || {},\n            context = {\n          children: props.children,\n          className: props.className,\n          disabled: props.disabled || state.disabled,\n          icon: props.icon\n        };\n\n        if (this.props.label) {\n          context.children = [this.props.label];\n        }\n\n        if (this.props.loading || state.loading) {\n          exports.applyLoadingState.call(this, context);\n        }\n\n        if (context.icon) {\n          exports.applyIcon.call(this, context);\n        }\n\n        if (context.disabled) {\n          context.className += ' disabled';\n        }\n\n        var attributes = common.defaults({\n          className: common.mergeClassNames('ui button', this._className, context.className)\n        }, this.props);\n        return React.DOM.button(attributes, context.children);\n      }\n    }\n  };\n  common.init(exports, classData, {\n    ifReactBackbone: function (options) {\n      options.mixins = {\n        Button: ['modelLoadOn'],\n        Form: ['modelAsyncListener']\n      };\n    }\n  });\n  return exports;\n};","map":null,"metadata":{},"sourceType":"script"}