{"ast":null,"code":"var cache = {\n  id: 0\n},\n    reactBackboneAware = !!React.mixins.exists('modelFieldValidator');\n\nmodule.exports = function (React) {\n  return {\n    uniqueId: function () {\n      return 'rsui-' + cache.id++;\n    },\n    defaults: function () {\n      var base = arguments[0],\n          current;\n\n      for (var i = 1; i < arguments.length; i++) {\n        current = arguments[i];\n\n        for (var name in current) {\n          if (base[name] === undefined) {\n            base[name] = current[name];\n          }\n        }\n      }\n\n      return base;\n    },\n    omit: function (data, keys) {\n      var rtn = {};\n\n      for (var name in data) {\n        if (keys.indexOf(name) === -1) {\n          rtn[name] = data[name];\n        }\n      }\n\n      return rtn;\n    },\n    mergeClassNames: function () {\n      var rtn = '';\n\n      for (var i = 0; i < arguments.length; i++) {\n        if (arguments[i]) {\n          if (rtn.length > 0) rtn += ' ';\n          rtn += arguments[i];\n        }\n      }\n\n      return rtn && rtn;\n    },\n    eventBinder: function (value, type, context, cancelEvent) {\n      return function (event) {\n        if (cancelEvent) {\n          event.stopPropagation();\n          event.preventDefault();\n        }\n\n        if (context[type]) {\n          context[type](value, event);\n        }\n\n        if (context.props[type]) {\n          context.props[type](value, event);\n        }\n      };\n    },\n    result: function (value, context) {\n      if (typeof value === 'function') {\n        return value.call(context);\n      } else {\n        return value;\n      }\n    },\n    init: function (exports, classData, options) {\n      options = options || {}; // allow for special setup if https://github.com/jhudson8/react-backbone is installed\n\n      if (reactBackboneAware && options.ifReactBackbone) {\n        options.ifReactBackbone(options);\n      }\n\n      var _mixins = exports.mixins;\n\n      if (!exports.mixins) {\n        _mixins = exports.mixins || {\n          all: []\n        };\n      }\n\n      function _init() {\n        for (var name in classData) {\n          var data = classData[name],\n              spec = {};\n\n          for (var _name in data) {\n            spec[_name] = data[_name];\n          }\n\n          if (options.defaults) {\n            for (var fName in options.defaults) {\n              if (!spec[fName]) {\n                spec[fName] = options.defaults[fName];\n              }\n            }\n          }\n\n          options.mixins = options.mixins || {};\n          spec.mixins = [spec.mixins, _mixins[name], _mixins.all, options.mixins[name], options.mixins.all];\n          exports[name] = React.createClass(spec);\n        }\n      }\n\n      exports.reset = _init;\n      exports.classData = classData;\n\n      _init();\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"script"}