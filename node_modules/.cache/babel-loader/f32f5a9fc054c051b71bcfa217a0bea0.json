{"ast":null,"code":"module.exports = function (React, form, common) {\n  function getDefaultValue(self, props) {\n    return props.defaultValue || self.getModelValue();\n  }\n\n  React.mixins.add('modelValueAccessor', {\n    getModelValue: function () {\n      return this.state && this.state.value || this.props.value;\n    },\n    setModelValue: function (value) {\n      this.setState({\n        value: value\n      });\n    }\n  });\n  var exports = {\n    mixins: {\n      all: ['modelValueAccessor']\n    },\n    optionsRetriever: function (defaultValue) {\n      var rtn = (this.props.options || []).map(function (item) {\n        var label, value, selected;\n\n        if (typeof item === 'string') {\n          selected = defaultValue === item;\n          value = item;\n          label = item;\n        } else {\n          selected = defaultValue === item.value;\n          value = item.value;\n          label = item.label;\n        }\n\n        return {\n          value: value,\n          label: label,\n          selected: selected\n        };\n      });\n\n      if (this.props.placeholder) {\n        rtn.splice(0, 0, {\n          value: '',\n          label: this.props.placeholder\n        });\n      }\n\n      return rtn;\n    }\n  };\n  var classData = {\n    /*** Text\n     * Standard text field that can display a label and optional field wrapper\n     *\n     * Properties\n     * ----------\n     * - ***type***: the input type (\"text\" by default)\n     * - ***value***: the field value\n     * - ***name***: the field name\n     *\n     * *other component attributes will be copied to the input field attributes*\n     *\n     * *see additional properties from [Field Control](../form/Control.md)*\n     *\n     * Overrides\n     * ---------\n     * - ***mixins.Text***: default mixins that should be applied\n     *\n     * *see [overrides](./overrides.md)*\n     *\n     * Example\n     * --------\n     *     var Text = rsui.input.Text;\n     *     <Text label=\"Foo\" defaultValue=\"bar\"> ... </Text>\n     ***/\n    Text: {\n      renderInput: function (props) {\n        props.type = props.type || 'text';\n        props.defaultValue = getDefaultValue(this, props);\n        props.className = common.mergeClassNames(props.className, this._className);\n        return React.DOM.input(props);\n      }\n    },\n\n    /*** TextArea\n     * Standard textarea field that can display a label and optional field wrapper\n     *\n     * Properties\n     * ----------\n     * - ***value***: the field value\n     * - ***name***: the field name\n     *\n     * *other component attributes will be copied to the input field attributes*\n     *\n     * *see additional properties from [Field Control](../form/Control.md)*\n     *\n     * Overrides\n     * ---------\n     * - ***mixins.Text***: default mixins that should be applied\n     *\n     * *see [overrides](./overrides.md)*\n     *\n     * Example\n     * --------\n     *     var Text = rsui.input.Text;\n     *     <TextArea label=\"Foo\" defaultValue=\"bar\"> ... </TextArea>\n     ***/\n    TextArea: {\n      renderInput: function (props) {\n        props.defaultValue = getDefaultValue(this, props);\n        props.className = common.mergeClassNames(props.className, this._className);\n        return React.DOM.textarea(props);\n      }\n    },\n\n    /*** Select\n     * Standard select field that can display a label and optional field wrapper.\n     * A [fancier control](./Dropdown.md) can be used as well.\n     *\n     * Properties\n     * ----------\n     * - ***options***: the available options list (by default can be array of strings, or array of {value, label})\n     * - ***value***: the field value\n     * - ***name***: the field name\n     *\n     * *other component attributes will be copied to the input field attributes*\n     *\n     * *see additional properties from [Field Control](../form/Control.md)*\n     *\n     * Overrides\n     * ---------\n     * - ***mixins.Select***: default mixins that should be applied\n     * ```optionsRetriever```\n     *\n     * *see [overrides](./overrides.md)*\n     *\n     * Example\n     * --------\n     *      var Select = rsui.input.Select;\n     *      <Select label=\"Foo\" defaultValue=\"abc\" options={[{value: '1', label: 'One'}, {value: '2', label: 'Two'}]}/>\n     ***/\n    Select: {\n      defaultContainerClass: function () {\n        return common.mergeClassNames('ui dropdown', this.props.type);\n      },\n      renderInput: function (props) {\n        var defaultValue = getDefaultValue(this, props);\n        options = exports.optionsRetriever.call(this, defaultValue).map(function (option) {\n          return React.DOM.option({\n            value: option.value\n          }, option.label);\n        });\n        props.defaultValue = defaultValue;\n        props.className = common.mergeClassNames(props.className, this._className);\n        return React.DOM.select(props, options);\n      }\n    },\n\n    /*** Checkbox\n     * Standard checkbox field that can display a label and optional field wrapper.\n     *\n     * Properties\n     * ----------\n     * - ***defaultChecked*** true if the field should be checked in it's initial state\n     * - ***value***: the field value (\"true\" by default)\n     * - ***name***: the field name\n     *\n     * *other component attributes will be copied to the input field attributes*\n     *\n     * *see additional properties from [Field Control](../form/Control.md)*\n     *\n     * Overrides\n     * ---------\n     * - ***mixins.Checkbox***: default mixins that should be applied\n     *\n     * *see [overrides](./overrides.md)*\n     *\n     * Example\n     * --------\n     *     var Checkbox = rsui.input.Checkbox;\n     *     <Checkbox label=\"Foo\" defaultChecked={true} defaultValue=\"abc\"/>\n     ***/\n    Checkbox: {\n      defaultLabelAfter: true,\n      defaultInlineLabel: true,\n      defaultContainerClass: function () {\n        return common.mergeClassNames('ui checkbox', this.props.type, this._className);\n      },\n      renderInput: function (props) {\n        var checked = getDefaultValue(this, props);\n\n        if (checked === undefined) {\n          checked = this.props.defaultChecked;\n        }\n\n        props.defaultChecked = checked;\n        props.value = this.props.value || 'true';\n        props.type = 'checkbox';\n        props.className = common.mergeClassNames(props.className);\n        return React.DOM.input(props);\n      },\n      getDOMValue: function (el) {\n        return !!el.checked;\n      }\n    },\n\n    /*** RadioGroup\n     * Collection of radio items field that can display a label and optional field wrapper.  The item\n     * data is retrieved in the same way that the [Dropdown](./Dropdown.md) component does.\n     *\n     * Properties\n     * ----------\n     * - ***options***: the available options list (by default can be array of strings, or array of {value, label})\n     * - ***value***: the field value (\"true\" by default)\n     * - ***name***: the field name\n     *\n     * *other component attributes will be copied to the input field attributes*\n     *\n     * *see additional properties from [Field Control](../form/Control.md)*\n     *\n     * Overrides\n     * ---------\n     * - ***mixins.RadioGroup***: default mixins that should be applied\n     * ```optionsRetriever```\n     *\n     * *see [overrides](./overrides.md)*\n     *\n     * Example\n     * --------\n     *     var RadioGroup = rsui.input.RadioGroup;\n     *     <RadioGroup label=\"Foo\" defaultValue=\"abc\" options={[{value: '1', label: 'One'}, {value: '2', label: 'Two'}]}/>\n     ***/\n    RadioGroup: {\n      defaultContainerClass: function () {\n        return 'grouped fields inline';\n      },\n      renderInput: function (props) {\n        var self = this,\n            state = this.state,\n            value = getDefaultValue(this, props),\n            options = exports.optionsRetriever.call(this, value).map(function (option) {\n          var id = common.uniqueId(),\n              className = common.mergeClassNames('ui radio checkbox', props.className, this._className);\n          return React.DOM.div({\n            className: 'field'\n          }, React.DOM.div({\n            className: className\n          }, React.DOM.input({\n            id: id,\n            type: 'radio',\n            name: props.name,\n            value: option.value,\n            defaultChecked: option.selected,\n            onChange: common.eventBinder(option.value, 'onChange', self)\n          }), React.DOM.label({\n            htmlFor: id\n          }, option.label)));\n        });\n        return options;\n      }\n    },\n\n    /*** Dropdown\n     * Similar to the [Select](./Select.md) component but fancier.  See [examples](http://semantic-ui.com/modules/dropdown.html#/examples)\n     * for more details on the actual semantic-ui component.\n     *\n     * Properties\n     * ----------\n     * - ***options***: the available options list (by default can be array of strings, or array of {value, label})\n     * - ***value***: the field value (\"true\" by default)\n     * - ***name***: the field name\n     *\n     * *other component attributes will be copied to the input field attributes*\n     *\n     * *see additional properties from [Field Control](../form/Control.md)*\n     *\n     * Overrides\n     * ---------\n     * - ***mixins.Dropdown***: default mixins that should be applied\n     * ```optionsRetriever```\n     *\n     * *see [overrides](./overrides.md)*\n     *\n     * Example\n     * --------\n     *     var RadioGroup = rsui.input.RadioGroup;\n     *     <RadioGroup label=\"Foo\" defaultValue=\"abc\" options={[{value: '1', label: 'One'}, {value: '2', label: 'Two'}]}/>\n     ***/\n    Dropdown: {\n      render: function () {\n        var props = this.props,\n            value = getDefaultValue(this, props);\n        var options = exports.optionsRetriever.call(this, value).map(function (option) {\n          return React.DOM.div({\n            className: common.mergeClassNames('item', option.selected ? 'active' : undefined),\n            'data-value': option.value\n          }, option.label);\n        });\n        var inputProps = common.omit(props, ['label', 'className', 'options', 'value', 'icon', 'onChange', 'onShow', 'onHide']);\n        inputProps.type = 'hidden';\n        inputProps.defaultValue = value;\n        return React.DOM.div({\n          className: common.mergeClassNames('ui dropdown ' + (props.type || 'floating'), props.className, this._className)\n        }, React.DOM.input(inputProps), React.DOM.div({\n          className: 'text'\n        }, props.label), React.DOM.i({\n          className: (props.icon || 'dropdown') + ' icon'\n        }), React.DOM.div({\n          className: 'menu'\n        }, options));\n      },\n      componentDidMount: function () {\n        $(this.getDOMNode()).dropdown({\n          onChange: this.props.onChange,\n          onShow: this.props.onShow,\n          onHide: this.props.onHide\n        });\n      },\n      getDOMValue: function (el) {\n        return $(this.getDOMNode()).dropdown('get value');\n      }\n    }\n  };\n  common.init(exports, classData, {\n    defaults: {\n      render: form.fieldRenderer,\n      getDOMValue: function (el) {\n        return $(el).val();\n      }\n    },\n    ifReactBackbone: function (options) {\n      exports.defaultModelSetOptions = {\n        validate: true,\n        allowEmpty: true\n      };\n      /**\n       * This mixin listenets for onChange events and set the associated model with that value.  If the\n       * model change succeeds, the \"error\" state attribute will be removed.\n       */\n\n      React.mixins.add('modelChangeSetter', {\n        modifyInputFieldProps: function (props) {\n          var onChange = props.onChange,\n              model = this.getModel(),\n              key = props.key;\n\n          if (props.set === undefined || props.set === true) {\n            props.set = exports.defaultModelSetOptions;\n\n            if (props.set) {\n              var self = this;\n\n              props.onChange = function (event) {\n                var model = self.getModel();\n\n                if (model) {\n                  var value = self.getDOMValue(event.currentTarget);\n\n                  if (self.setModelValue(value, props.set) !== false) {\n                    // we did not encounter a validation error\n                    if (self.state && self.state.error) {\n                      self.setState({\n                        error: false\n                      });\n                    }\n                  }\n\n                  if (onChange) {\n                    onChange.call(self, event);\n                  }\n                }\n              };\n            }\n          }\n\n          return props;\n        }\n      }, 'modelValueAccessor', 'modelEventBinder');\n      options.mixins = {\n        all: ['modelChangeSetter', 'modelFieldValidator']\n      };\n    }\n  });\n  return exports;\n};","map":null,"metadata":{},"sourceType":"script"}